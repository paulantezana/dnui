---
import '../styles/main.scss';
import '../styles/global.css';
import Header from '../components/Header.astro';
import AsideMenu from '../components/AsideMenu.astro';
import Footer from '../components/Footer.astro';

export interface Props {
  title: string;
  description?: string;
}

const { title, description = 'DN-UI Component Library Documentation' } =
  Astro.props;
const siteName = 'DNUI CSS';
---

<!doctype html>
<html lang="en">
  <head>
    <title>{title}</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="initial-scale=1.0, width=device-width" />
    <meta name="description" content={description} />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css?family=Inter:300,400,500,600&display=swap"
    />
    <link rel="shortcut icon" href="/assets/images/logo.svg" />
    <meta property="og:title" content={siteName + ' CSS | ' + title} />
    <meta property="og:type" content="website" />
    <meta property="og:description" content={description} />
    <meta property="og:url" content="/index" />
    <meta property="og:image" content="/assets/images/banner.jpg" />
    <meta property="og:site_name" content={siteName} />
    <meta property="og:locale" content="es_PE" />
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:title" content={siteName + ' | ' + title} />
    <meta property="twitter:description" content={description} />
    <meta name="theme-color" content="#3b82f6" />
    <script>
      // Detectar preferencia del sistema para tema
      if (typeof window !== 'undefined') {
        const theme =
          localStorage.getItem('theme') ||
          (window.matchMedia('(prefers-color-scheme: dark)').matches
            ? 'dark'
            : 'light');
        document.documentElement.classList.toggle('dark', theme === 'dark');
        localStorage.setItem('theme', theme);
      }
    </script>
  </head>
  <body
    class="bg-white dark:bg-zinc-800 text-zinc-900 dark:text-zinc-100 font-inter antialiased transition-colors duration-200"
  >
    <!-- Mobile Menu Overlay -->
    <div
      id="mobile-overlay"
      class="fixed inset-0 z-40 bg-black/50 lg:hidden hidden"
    >
    </div>

    <div class="min-h-screen flex flex-col">
      <!-- Header Component -->
      <Header />

      <!-- Main Layout -->
      <div class="flex flex-1">
        <!-- Sidebar Component -->
        <AsideMenu />

        <!-- Main Content -->
        <main class="flex flex-1 min-w-0">
          <div class="flex-1 max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <!-- Page Header -->
            <div class="mb-8">
              <h1 class="text-3xl font-bold text-zinc-900 dark:text-zinc-100 mb-2">{title}</h1>
              {description && (
                <p class="text-lg text-zinc-600 dark:text-zinc-400 leading-relaxed">{description}</p>
              )}
            </div>

            <!-- Content Slot -->
            <div class="prose prose-zinc dark:prose-invert max-w-none prose-headings:scroll-mt-20 prose-pre:bg-zinc-900 prose-pre:border prose-pre:border-zinc-800">
              <slot />
            </div>

            <!-- Navegación de página anterior/siguiente -->
            <div class="flex justify-between items-center mt-12 pt-8 border-t border-zinc-200 dark:border-zinc-800">
              <div class="flex-1">
                <!-- Página anterior se puede agregar aquí dinámicamente -->
              </div>
              <div class="flex-1 text-right">
                <!-- Página siguiente se puede agregar aquí dinámicamente -->
              </div>
            </div>
          </div>
          <aside class="hidden xl:block sticky top-16 right-0 w-64 h-full overflow-y-auto py-8 px-4 border-l border-zinc-200 dark:border-zinc-800 bg-zinc-50/50 dark:bg-zinc-900/50">
            <div class="sticky top-8">
              <h4 class="text-sm font-semibold text-zinc-900 dark:text-zinc-100 mb-4">On this page</h4>
              <nav id="toc" class="space-y-2">
                <!-- El TOC se generará dinámicamente con JavaScript -->
              </nav>
            </div>
          </aside>
        </main>
      </div>

      <!-- Footer Component -->
      <Footer />
    </div>
    <script>
      import '../scripts/client.ts';
    </script>
    <script is:inline>
      // JavaScript para funcionalidad del layout
      document.addEventListener('DOMContentLoaded', function () {
        setTimeout(()=> {
          window.PdInput();
          PdModal.init();
          PdTab.listen();
          PdCollapse.init();
          // PdIcon.render(); // Descomentarlo si es necesario
          PdAlert.listen();
          PdMenu.listen();
          PdRipple();
        }, 1000);


        // Mobile menu toggle
        const mobileMenuBtn = document.getElementById('mobile-menu-btn');
        const sidebar = document.getElementById('sidebar');
        const overlay = document.getElementById('mobile-overlay');
        const sidebarClose = document.getElementById('sidebar-close');

        function toggleMobileMenu() {
          sidebar.classList.toggle('-translate-x-full');
          overlay.classList.toggle('hidden');
          document.body.classList.toggle(
            'overflow-hidden',
            !sidebar.classList.contains('-translate-x-full')
          );
        }

        mobileMenuBtn?.addEventListener('click', toggleMobileMenu);
        sidebarClose?.addEventListener('click', toggleMobileMenu);
        overlay?.addEventListener('click', toggleMobileMenu);

        // Theme toggle
        const themeToggle = document.getElementById('theme-toggle');

        function toggleTheme() {
          const isDark = document.documentElement.classList.toggle('dark');
          localStorage.setItem('theme', isDark ? 'dark' : 'light');
        }

        themeToggle?.addEventListener('click', toggleTheme);

        // Listen for system theme changes
        window
          .matchMedia('(prefers-color-scheme: dark)')
          .addEventListener('change', (e) => {
            if (!localStorage.getItem('theme')) {
              document.documentElement.classList.toggle('dark', e.matches);
            }
          });

        // Keyboard shortcuts
        document.addEventListener('keydown', (e) => {
          // Ctrl+K para search
          if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
            e.preventDefault();
            const searchInput = document.querySelector('input[type="text"]');
            searchInput?.focus();
          }

          // Escape para cerrar mobile menu
          if (e.key === 'Escape') {
            if (!sidebar.classList.contains('-translate-x-full')) {
              toggleMobileMenu();
            }
          }
        });

        // Auto-close mobile menu on resize
        let resizeTimer;
        window.addEventListener('resize', () => {
          clearTimeout(resizeTimer);
          resizeTimer = setTimeout(() => {
            if (window.innerWidth >= 1024) {
              sidebar.classList.remove('-translate-x-full');
              overlay.classList.add('hidden');
              document.body.classList.remove('overflow-hidden');
            }
          }, 250);
        });

        // Generate Table of Contents
        function generateTOC() {
          const toc = document.getElementById('toc');
          if (!toc) return;

          const headings = document.querySelectorAll(
            '.prose h2, .prose h3, .prose h4'
          );
          if (headings.length === 0) {
            toc.innerHTML =
              '<p class="text-xs text-zinc-500 dark:text-zinc-400">No headings found</p>';
            return;
          }

          const tocList = document.createElement('div');
          tocList.className = 'space-y-1';

          headings.forEach((heading, index) => {
            // Crear ID si no existe
            if (!heading.id) {
              heading.id = `heading-${index}`;
            }

            const link = document.createElement('a');
            link.href = `#${heading.id}`;
            link.textContent = heading.textContent;
            link.className = `block text-sm transition-colors py-1 ${
              heading.tagName === 'H2'
                ? 'text-zinc-700 dark:text-zinc-300 font-medium hover:text-blue-600 dark:hover:text-blue-400'
                : 'text-zinc-600 dark:text-zinc-400 pl-3 hover:text-zinc-900 dark:hover:text-zinc-100'
            }`;

            // Smooth scroll
            link.addEventListener('click', (e) => {
              e.preventDefault();
              heading.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
              });
              history.pushState(null, '', `#${heading.id}`);
            });

            tocList.appendChild(link);
          });

          toc.appendChild(tocList);
        }

        // Generar TOC después de que el contenido se cargue
        setTimeout(generateTOC, 100);

        // Highlight active TOC item on scroll
        let ticking = false;
        function updateActiveTOC() {
          if (!ticking) {
            requestAnimationFrame(() => {
              const headings = document.querySelectorAll(
                '.prose h2, .prose h3, .prose h4'
              );
              const tocLinks = document.querySelectorAll('#toc a');

              let activeIndex = -1;
              const scrollPosition = window.scrollY + 100;

              headings.forEach((heading, index) => {
                if (heading.offsetTop <= scrollPosition) {
                  activeIndex = index;
                }
              });

              tocLinks.forEach((link, index) => {
                link.classList.toggle('text-blue-600', index === activeIndex);
                link.classList.toggle(
                  'dark:text-blue-400',
                  index === activeIndex
                );
              });

              ticking = false;
            });
          }
          ticking = true;
        }

        window.addEventListener('scroll', updateActiveTOC, { passive: true });

        // Search functionality (básica)
        const searchInput = document.querySelector('input[type="text"]');
        if (searchInput) {
          searchInput.addEventListener('input', (e) => {
            const query = e.target.value.toLowerCase();
            if (query.length < 2) return;

            // Aquí puedes implementar la lógica de búsqueda
            console.log('Searching for:', query);
          });
        }
      });
    </script>
  </body>
</html>

